В этом файле у нас будет шпаргалка по занятиям 6 и 7 вместе, так как 6 занятие по наполненности материалом было небольшим.

Из занятия 6:

База данных в джанго хранит не только нужную пользователям информацию, но и системную. Для этого создается изначальная база данных, куда помещаются системные данные.

В файле settings.py можете увидеть переменную DATABASES с таким содержимым:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
Кроме default - изначальной базы данных -  могут существовать и другие базы данных, они тоже будут ключами этого словаря. В таких базах данных есть несколько параметров - здесь их два. NAME - путь к файлу конкретной базы данных, ENGINE - движок, на котором работает база данных - для нас это диалект sql, на котором должны писаться все обращения к базе данных. В нашем случае это sqlite3. Могут быть и другие движки, например django.db.backends.postgresql или django.db.backends.mysql.

На момент создания в базе данных ещё нет ничего. В терминале мы записываем python manage.py migrate и выполняем эту команду. Производится миграция, данные перемещаются в базу данных, и теперь она наполнена некоторыми таблицами. Чтобы посмотреть на эти таблицы, скачиваем приложение DB Browser for SQLite по ссылке https://sqlitebrowser.org/dl/. Для винды лучшим вариантом скачивания является "DB Browser for SQLite - Standard installer for 64-bit Windows". В процессе скачивания вы наткнётесь на вкладку Shortcuts, где вас спросят, что ставить - DB Browser (SQLite) или DB Browser (SQL Cliper). Вам нужно поставить галочки только рядом с первым. Остальное всё по умолчанию. 

Теперь можно открыть приложение DB Browser. Сверху выбираем "открыть базу данных" и на вашем компьютере находим путь до джанго проекта и конкретно этой базы данных. Выбираем её, она открывается. Можем видеть таблицы, которые в ней находятся. По другой вкладке можно увидеть конкретные Данные, а во вкладке SQL можно написать запрос и обратиться к ней. ОСтальное оставляю на ваше знакомство с приложением)

Из занятия 7:

На этом занятии мы по технологии ORM - ООП внутри джанго - сделали таблицу и поместили её в базу данных. 

Для начала переходим в файл models.py папки app_advertisements14. Таблица создаётся следующим кодом:
from django.db import models
class Advertisements14(models.Model):

Мы опираемся на некоторый шаблон таблицы - Model - и дополняем его нужными нам характеристиками, например столбцами.

Для создания атрибутов в нашей таблице мы дополняем код следующим образом:
from django.db import models
class Advertisements14(models.Model):
    title = models.CharField('заголовок', max_length=128)
    description = models.TextField('описание')
    price = models.DecimalField('цена', max_digits=10, decimal_places=2)
    auction = models.BooleanField('торг', help_text='Отметьте, если возможен торг')
    connection = models.BooleanField('связь', help_text='Отметьте, возможна ли связь с продавцом', default=True)
    created_time = models.DateTimeField(auto_now_add=True)
    updated_time = models.DateTimeField(auto_now=True)

каждая переменная в таком классе - имя столбца; а типы данных следующие: CharField - короткий текст, в данном случае не длиннее 128 символов, TextField - неограниченный по размерам текст, DecimalField - число с точкой, в нём указывается, сколько всего в нём может быть цифр и сколько из них могут быть после точки, в данном случае это 10 и 2 соответственно, BooleanField - булевый тип, логическое Да и Нет, передаётся через True и False, хранится в 1 и 0. DateTimeField - дата и время, параметр auto_now_add=True записывает время первого появления, а auto_now - последнего изменения. Подробнее про типы можно почитать тут - https://django.fun/ru/docs/django/4.1/ref/models/fields/.

Чтобы таблица появилась в базе данных, необходимо провести миграцию. Сначала создадим её:
python manage.py makemigrations
После этого проведём:
python manage.py migrate

Теперь в DB Browser можно увидеть эту таблицу. Её название состоит из названия приложения и названия модели.
А в джанго в папке migrations приложения app_advertisements14 можно увидеть файл 0001_initial.py - это эдакий лог того, что мы сделали. В данном случае - создали модель. В переменной dependencies были бы смежныые миграции, если бы мы проводили изменения с уже "замигрированной" моделью.

Теперь попробуем добавить данные в таблицу, обратимся к питоновской консоли внутри джанго:
python manage.py shell

как модуль подгружаем модель:
from app_advertisements14.models import Advertisements14

теперь создаём переменные с содержанием, которое будем добавлять
adv1 = Advertisements14(title='Заголовок №1', description='Описание №1', price = 100, auction = True, connection=True)
Переменные created_time и updated_time заполнятся автоматически

добавляем в таблицу:
adv1.save()

Чтобы обратиться к содержимому, вызываем:
queryset = Advertisements14.objects.all()

Хотим обратиться к первому из них:
first_obj = queryset[0]

Проще можем обратиться к первому так:
first_obj = Advertisements14.objects.first()

А последнему:

last_obj = Advertisements14.objects.last()

На самом деле это всё были SQL запросы, только преобразованные. Посмотрим, как они выглядели на самом деле:

from django.db import connection
connection.queries