Алгоритм создания и наполнения страниц html, - реализация слоя Template в фреймворке Django.

1. В папке проекта (здесь и далее под проектом будет пониматься созданный нами django project - у меня он называется advertisements14) создаём вручную пустую папку с названием templates. Делается это в PyCharm нажатием правой кнопкой мыши на папке проекта, затем выбором New и Directory. Для повторения - называем новую папку templates. После создания пустой папки идём в чат тг, скачиваем оттуда зип файл Zip_for_14. Находим его в проводнике, щелкаем на нем правой кнопкой мыши, выбираем "извлечь все" и извлекаем содержимое в директорию, которую хотим. В итоге получаем папку - разархивированный зип, - где внутри лежат 3 папки и 7 html файлов. Копируем все html файлы, возвращаемся в среду программирования, нажимаем правой кнопкой мыши на пустой папке templates и выбираем Paste - вставить. В итоге внутри папки templates у нас лежат все html шаблоны.

2. Чтобы джанго видел наши html шаблоны, идем (в среде программирования) в файл settings.py, он лежит в папке-приложении, которая имеет такое же название, как и папка всего проекта. В этом файле находим часть с "TEMPLATES =" и рядом с надписью "DIRS" дописываем текст так, чтобы получилось:
'DIRS':[Path.joinpath(BASE_DIR, 'templates')],
BASE_DIR - это директория самой папки проекта, нужно проверить, что эта переменная существует в данном файле и равна Path(__file__).resolve().parent.parent

3. Показали джанго, где лежат шаблоны, теперь будем изменять наше изначальное приложение (у меня app_advertisements14) так, чтобы оно выдавало в ответ не текст, а страницу html. Переходим в папку app_advertisements14 и в файле views.py заменяем содержимое функции index() на return render(request, 'index.html'). Теперь при запуске python manage.py runserver в терминале в ответ будет отдаваться страница html.

4. Выглядит страница пока плохо, нужна статика - оформление страницы. Это css файлы, картинки и java script. Подключаем статику так - сначала щелкаем правой кнопкой мыши на файле проекта, выбираем New и Directory - создаем пустую папку с названием static. Теперь идем в проводник в папку, где лежат разархивированные файлы из Zip_for_14. Копируем три папки, которые там лежат, возвращаемся в среду программирования и с помощью нажатия правой кнопкой мыши на пустой папке static и затем выбором Paste вставляем скопированные папки в папку static. 

5. Чтобы джанго видел наши файлы статики, снова идем в settings.py и дополняем его содержимое так, чтобы рядом с надписью "# Static files (CSS, JavaScript, Images)" появились вот такие строки:
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    Path.joinpath(BASE_DIR, 'static')
]
Верхняя из них уже может присутствовать в файле, тогда просто убеждаемся, что она в нужном виде. Важно - если здесь или в случае папки templates вы называли папки иначе, то после "BASE_DIR," вам нужно написать ваше реальное название папки, где лежат файлы шаблонов и статики.

6. Подгружаем статику непосредственно в шаблоне, который используется как главная страница - в файле index.html добавляем в самом верху строчку {% load static %}. Теперь подсоединим наш визуал к конкретным элементам этой страницы - в шапке (теге head) зададим оформление в следующем виде:
<link href="{% static 'css/bootstrap.min.css' %}" rel="stylesheet">
<link rel="stylesheet" href="{% static 'css/fontello.css' %}">
То же самое делается с картинками - для подключения их визуала нужно так же заключить названия картинок в {% static ' слева и ' %} справа:
<div class="carousel-item active">
      <img src="{% static 'img/adv.png' %}" class="mx-auto d-block w-33" alt="...">
    </div>
    <div class="carousel-item">
      <img src="{% static 'img/adv.png' %}" class="mx-auto d-block w-33" alt="...">
    </div>
    <div class="carousel-item">
      <img src="{% static 'img/adv.png' %}" class="mx-auto d-block w-33" alt="...">
    </div>
Пока используются одинаковые картинки, но вы можете подключить разные - посмотреть, как получится.

7. Пока у нас не подключено плавное движение по стрелочкам на странице, для этого подключаем java script. В том же файле index.html находим тег script и прописываем его следующим образом:
<script src="{% static 'js/bootstrap.bundle.min.js' %}"></script>
То есть тоже просто обрамляя путь до файла со скриптами в нужную нам конструкцию статика.

8. Теперь попробуем подключить переход на другую страницу с нашей главной страницы. В файле views.py папки app_advertisements14 дописываем функцию top_sellers:
def top_sellers(request):
    return render(request, 'top-sellers.html')
В файле urls.py папки app_advertisements14 изменяем содержимое на:
from django.urls import path
from .views import index, top_sellers

urlpatterns = [
    path('', index),
    path('top-sellers/', top_sellers)
]
Чтобы работала ссылка перехода на наш файл с продавцами, в файле index.py исправим рядом с "Топ продавцов" ссылку href на "top-sellers".

9. Чтобы не обрабатывать визуал каждого файла отдельно, создадим базовый файл с оформлением, а остальные файлы будем подстраивать под него. Создаём в папке templates файл base.html, копируем в него содержимое файла index.html. С помощью блоков
{% block *название_блока* %}
{% endblock %}
можем задавать вариантивные части кода. Остальные - снаружи блоков - будут фиксированными для всех файлов, куда подключится этот базовый файл. Оставляем в файле base.html фиксированные части, задаем вариантивные - как в итоге это выглядит, можете посмотреть внутри файла base.html.

10. Шаблон шаблонов готов, теперь можем подключить его к файлу index.html - добавить в index.html сверху строчку {% extends 'base.html' %}. Далее убираем все зафиксированные в файле-базе части, добавляем индивидуальное в вариативные части - на итог можно посмотреть в файле index.html.

11. Чтобы можно было возвращаться на изначальную страницу с top-sellers, переходим в файл top-sellers.html и заменяем путь до "Главная" на href="/"

12. Чтобы было удобнее обращаться к страницам не по пути, а по их имени, перейдем в файл urls.py папки app_advertisements14 и добавим имена нашим путям до страниц:
urlpatterns = [
    path('', index, name='main-page'),
    path('top-sellers/', top_sellers, name='top-sellers')
]
Теперь в файлах index.html и top-sellers.html можем заменить пути на {% url 'top-sellers' %} и {% url 'main-page' %}.

Пока все, до новых встреч! Если не получается что-то, пишите в чат) Если где-то допустила описку, тоже пишите, исправлю.