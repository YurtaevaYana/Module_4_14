На этом занятии мы изучили понятие асимптотической сложности и познакомились с работой с git. Сейчас последовательно разберём, что это такое.

# Асимптотическая сложность

В ходе создания кода мы стараемся сделать его "лучше" - задействовать меньше оперативной памяти и времени на выполнение, например. Но как оценить объективно сложность какого-то кода? Дл этого есть метрика Асимптотическая сложность. Это функция O() от числа операций, которое нужно затратить на выполнение кода. Например, если мы возьмем значение с 0 индексом из какой-то строки - это одна операция, сложность O(1). Если мы хотим вывести последовательно все элементы строки длины n, это будет сложность O(n). Если мы хотим вывести n чисел и для каждого из них приписать ещё n чисел, то это код сложности O(n*n) == O(n^2). Если посмотреть на картинку с занятия с функциями, можно заметить, что быстрее всех из них растёт функция x^2, средняя - x, а медленнее всех - log(x). Это значит, что при увеличении x на 1 y будет увеличиваться на какое-то значение - и чем быстрее растет функция, тем больше это значение. Аналогично, при увеличении значения n в нашем коде будет увеличиваться сложность кода - и чем быстрее растёт функция, тем сильнее будет усложняться код. Значит, наилучшим вариантом для нас здесь будет log(n), а наихудшим - n^2.

На примере кодов с занятия:

# def strcounter(s): # сложность O(n*n) == O(n^2) == O(25)
#     for sym in s:
#         counter = 0
#         for sub_sym in s:
#             if sym == sub_sym:
#                 counter += 1
#         print(sym, counter)

# strcounter('aabcd')

# def strcounter(s): # сложность O(n*m) == O(20)
#     for sym in set(s):
#         counter = 0
#         for sub_sym in s:
#             if sym == sub_sym:
#                 counter += 1
#         print(sym, counter)

# strcounter('aabbbbccd')

def strcounter(s): # сложность O(n+m) == O(9)
    syms_counter = {}
    for sym in s:
        syms_counter[sym] = syms_counter.get(sym, 0) + 1

    for sym, count in syms_counter.items():
        print(sym, count)
strcounter('aabbbbccd')

Проще всего оказался последний код - он затрачивает меньше всего операций.

# Git + GitHub

Программисты используют git (на компьютере) и github (в интернете) когда хотят поделиться своим кодом или работать с кем-то в команде над одним кодом или создавать несколько версий одного файла. Например, если мы хотим произвести изменения в файле, но не уверены, что этот код будет работать, мы можем создать дополнительную ветку, на ней производить все измненения, а если работает - подгрузить эту версию файла к своей основной ветке. 
git скачивается вот по этой ссылке - https://git-scm.com/
После скачивания установщика его нужно открыть и произвести установку. Затем можно пользоваться - на windows открываете git bash (найти в поиске по компьютеру), на mac - открываете обычный терминал. Далее знакомим гит с собой:
git config --global user.name "ИМЯ" (и нажимаете enter - тогда команда выполнится)
git config --global user.email "ПОЧТА"

И смотрим, что получилось:
git config --list

Затем нужно перейти в директорию, где будет располагаться наш гит репозиторий - команда cd, а дальше путь до этой папки
С помощью git status можем посмотреть, является ли данная папка репозиторием, если напишет, что нет (а так и должна, если мы ещё не создали там), то нужно вписать в следующей строке git init. Можно снова проверить статус. Если в репозитории уже лежат какие-то созданные нами файлы, их можно добавить по команде git add . (точка означает все новые файла, если добавить отдельный файл - git add название_файла.расширение_файла). Затем надо закоммитить эти изменения, чтобы они сохранились - git commit -m 'текст_пояснение'. Текст в данном случае нужен, это правила оформления изменений, которые уже незыблемы для тех, кто работает с гитом. Последний коммит можно посмотреть по команде git show.

Теперь про онлайн - заходим на сайт https://github.com/ и регистрируемся. По этому аккаунту вы будете создавать онлайн репозитории, где будут храниться ваши файлы. Переходим на вкладку репозиториев, создаём один такой - название и описание пишем, а вот файлы RESDME.md и остальные надстройки пока не добавляем. Пусть этот репозиторий будет пустым. Тогда, когда мы захотим поместить содержимое гита с нашего компьютера в онлайн, мы сможем связать эти два репозитория и переносить изменения с компьютера в онлайн и обратно. Налаживается эта связь так: 
git remote add origin ссылка_на_репозиторий_github
это мы познакомили репозитории - онлайновый для нашего локального будет называться origin
git branch -M main
переименовали основную ветку, так как на удаленном (онлайн) сервере она называется main, а на компьютере называлась master
git push -u origin main
запушили изменения на удаленный сервер (-u нужно только в первый раз)

Если будем производить изменения на удаленном сервере, то для выполнения тех же изменений в локальном репозитории достаточно выполнить команду git pull.

Пока всё, удачи в использовании!